package Chapter_19;

// 코드 작동 방식
// 1. 배열 순회: 배열의 두 번째 요소로부터 시작하여 배열의 끝까지 각 요소를 하나씩 선택
// 2. 삽입 위치 찾기: 선택된 요소보다 큰 요소들을 이미 정렬된 부분에서 찾기
// 3. 요소 이동: 삽입 위치를 찾기 위해, 선택된 요소보다 큰 요소들을 오른쪽으로 한 칸씩 이동 시킴
// 4. 삽입: 선택된 오소를 비어 있는 삽입 위치에 넣기
// 5. 반복: 배열의 끝까지 위의 4 과정을 반복

// InsertSort 클래스 선언 - 삽입 배열을 구현하는 클래스
public class InsertSort {
    public static void insertSort(int[] num) {
        // insertSort 메소드 선언 - 정수형 배열을 입력받아 삽입 정렬을 수행
        // static 메소드이므로 객체 생성 없이 클래스 이름으로 호출 가능
        // void 반환 타입은 정렬된 배열을 반환하지 않고, 입력 배열 자체를 변경

        // 삽입 정렬 로직을 구현
        int size = num.length;                                      // 배열의 크기를 size 변수에 저장 - 배열의 길이를 알아냄
        int temp = 0;                                               // 정렬 과정에서 임시로 값을 저장할 temp 변수 선언 및 초기화
        int j = 0;                                                  // 내부 반복문에서 사용할 j 변수 선언 및 초기화

        // 외부 반복문 - 두 번째 요소(인텍스1) 부터 배열의 끝까지 순회 -> i는 현재 삽입할 요소의 인덱스를 나타냄
        for (int i=1; i<size; i++) {

            // 현재 삽입할 요소의 값을 temp 변수에 저장 - 값을 덮어쓰지 않도록 임시 저장
            temp = num[i];

            // 내부 반복문 - 현재 요소(temp)를 정렬된 부분(0 부터 i-1까지)에 삽입할 위치를 찾음
            for (j=i-1; j>=0 && temp<num[j]; j--) {
                // j는 정렬된 부분의 오른쪽 끝에서부터 왼쪽으로 이동하면서 비교
                // j>=0: 배열의 범위를 벗어나지 않도록 함
                // temp<num[j]: temp가 num[j]보다 작으면 (즉, 삽입 위치를 찾지 못했으면) 계속 안쪽으로 이동

                // 현재 요소 보다 큰 요소들을 오른쪽으로 한 칸씩 이동시켜 삽입 공간을 확보
                num[j+1] = num[j];
            }
            // temp에 저장된 값을 적절한 위치(j+1)에 삽입 - 삽입 위치를 찾았거나, 정렬된 부분의 맨 앞에 도달했을 때
            num[j+1] = temp;
        }
    }

    // 프로그램 시작
    public static void main(String[] args) {
        // 정렬할 정수형 배열 선언 및 초기화
        int num[] = {5, 3, 1, 4, 2};

        // insertSort 메소드 호출 - 배열 num을 삽입 정렬
        insertSort(num);

        // 출력 로직 구현
        // 반복문 - 정렬된 배열의 모든 요소를 순회
        for (int i=0; i<num.length; i++) {
            // 각 요소를 출력하고 탭 문자를 추가하여 간격을 둠
            System.out.print(num[i] + "\t");
        }
        // 줄바꿈
        System.out.println();
    }
}
